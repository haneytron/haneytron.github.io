<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generics on David Haney - Blogging About .NET Core &amp; Engineering Management</title>
    <link>https://www.davidhaney.io/tags/generics/</link>
    <description>Recent content in Generics on David Haney - Blogging About .NET Core &amp; Engineering Management</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>David Haney</copyright>
    <lastBuildDate>Mon, 22 Apr 2013 14:53:17 +0000</lastBuildDate>
    <atom:link href="https://www.davidhaney.io/tags/generics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generic Comparer</title>
      <link>https://www.davidhaney.io/generic-comparer/</link>
      <pubDate>Mon, 22 Apr 2013 14:53:17 +0000</pubDate>
      <guid>https://www.davidhaney.io/generic-comparer/</guid>
      <description>&lt;p&gt;Have you ever had to write a comparer for a specific type, only to be frustrated when you needed to write a second and third comparer for other types? Fear not, a generic comparer can take care of this for you!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xD;&#xA;/// Compares two objects of any type.&#xD;&#xA;/// &amp;lt;/summary&amp;gt;&#xD;&#xA;/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type to be compared.&amp;lt;/typeparam&amp;gt;&#xD;&#xA;public class GenericComparer&amp;lt;T&amp;gt; : IComparer&amp;lt;T&amp;gt;&#xD;&#xA;{&#xD;&#xA;    // The compare method&#xD;&#xA;    private readonly Func&amp;lt;T, T, int&amp;gt; _compareMethod = null;&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// The constructor.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;compareMethod&amp;quot;&amp;gt;The compare method.&amp;lt;/param&amp;gt;&#xD;&#xA;    public GenericComparer(Func&amp;lt;T, T, int&amp;gt; compareMethod)&#xD;&#xA;    {&#xD;&#xA;        // Sanitize&#xD;&#xA;        if (compareMethod == null)&#xD;&#xA;        {&#xD;&#xA;            throw new ArgumentNullException(&amp;quot;compareMethod&amp;quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        _compareMethod = compareMethod;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// Compares two objects.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;x&amp;quot;&amp;gt;The first object.&amp;lt;/param&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;y&amp;quot;&amp;gt;The second object.&amp;lt;/param&amp;gt;&#xD;&#xA;    /// &amp;lt;returns&amp;gt;Less than 0 if x is less than y, greater than &#xD;&#xA;    /// 0 if x is greater than y, 0 if they are equal.&amp;lt;/returns&amp;gt;&#xD;&#xA;    public int Compare(T x, T y)&#xD;&#xA;    {&#xD;&#xA;        return _compareMethod(x, y);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Just pass a method to the constructor that takes 2 objects of type T and returns an int, and you’re all set!&lt;/p&gt;</description>
    </item>
    <item>
      <title>An Overview of Generic Constraints</title>
      <link>https://www.davidhaney.io/an-overview-of-generic-constraints/</link>
      <pubDate>Tue, 24 Apr 2012 21:46:41 +0000</pubDate>
      <guid>https://www.davidhaney.io/an-overview-of-generic-constraints/</guid>
      <description>&lt;p&gt;This is my first post. I hope that it doesn’t suck.&lt;/p&gt;&#xA;&lt;p&gt;As of .NET 2.0, Microsoft introduced the concept of generics. Generics is a concept that allow you to “template” methods and types such as classes and interfaces in a (generally) type-safe way. Upon compilation, generic type metadata is stored in IL, and JIT’d as you reference the generic method or class with an actual type at runtime. Value types each get their own “copy” of the JIT’d generic code, whereas reference types share a single instance of the code. This is because the generic implementation is identical for reference types – they’re all just pointers.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
