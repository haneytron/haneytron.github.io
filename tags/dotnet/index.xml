<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet on David Haney - Blogging About .NET Core &amp; Engineering Management</title>
    <link>https://www.davidhaney.io/tags/dotnet/</link>
    <description>Recent content in Dotnet on David Haney - Blogging About .NET Core &amp; Engineering Management</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>David Haney</copyright>
    <lastBuildDate>Sun, 29 Sep 2024 17:27:07 -0400</lastBuildDate>
    <atom:link href="https://www.davidhaney.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.NET Core MVC - How to Access appsettings.json</title>
      <link>https://www.davidhaney.io/net-core-mvc-access-appsettings-json/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 -0500</pubDate>
      <guid>https://www.davidhaney.io/net-core-mvc-access-appsettings-json/</guid>
      <description>&lt;p&gt;Well, once again I&amp;rsquo;ve fallen off of the blogging wagon. And once again I am now getting back on said aforementioned wagon. Let&amp;rsquo;s try and make this a more regular thing than once a year or so, shall we?&lt;/p&gt;&#xA;&lt;p&gt;I recently built a quick little hobby site / side project with .NET Core MVC. I have a lot of experience with ASP.NET MVC but I was totally new to .NET Core MVC. As a result, I had to teach myself the new ways of doing old things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>.NET Core Azure Functions Tutorial</title>
      <link>https://www.davidhaney.io/net-core-azure-functions-tutorial/</link>
      <pubDate>Mon, 19 Nov 2018 00:00:00 -0500</pubDate>
      <guid>https://www.davidhaney.io/net-core-azure-functions-tutorial/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;d like to show you how I ported an Azure Classic Cloud Service application (which cost me $16 USD a month by the way) to a .NET Core Azure Function, and now host it in Azure for $0 a month! That&amp;rsquo;s right - Azure Functions are both awesome and (usually) free!&lt;/p&gt;&#xA;&lt;h1 id=&#34;introducing-realdonaldtron&#34;&gt;Introducing realDonaldTron&lt;/h1&gt;&#xA;&lt;p&gt;So back in late 2016, when our dear leader was elected president, I decided to have a little fun at his expense. I created a &lt;a href=&#34;https://www.twitter.com/realDonaldTron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter account&lt;/a&gt;&#xD;&#xA; and generated API keys. I then created an Azure Classic Cloud Service and&#xA;wrote a quick and dirty Twitter bot. This bot consumes 1000s of the most recent tweets from Donald Trump, cleans up his grammar and punctuation a little (because he can&amp;rsquo;t write words good), generates a &lt;a href=&#34;https://en.wikipedia.org/wiki/Markov_chain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markov Chain&lt;/a&gt;&#xD;&#xA;&#xA;from the Tweets, and then schedules a .NET Timer to generate and publish a new Tweet at the top of every hour.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom ASP.NET MVC Action Result Cache Attribute</title>
      <link>https://www.davidhaney.io/custom-asp-net-mvc-action-result-cache-attribute/</link>
      <pubDate>Tue, 10 Jan 2017 09:07:15 +0000</pubDate>
      <guid>https://www.davidhaney.io/custom-asp-net-mvc-action-result-cache-attribute/</guid>
      <description>&lt;p&gt;If you’re working on an application built using ASP.NET MVC, you’re hopefully aware of the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.web.mvc.outputcacheattribute%28v=vs.118%29.aspx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OutputCacheAttribute&lt;/a&gt;&#xD;&#xA; attribute which can be used to statically cache your dynamic web pages. By adding this attribute to a controller or action method, the output of the method(s) will be stored in memory. For example, if your action method renders a view, then the view page will be cached in memory. This cached view page is then available to the application for all subsequent requests (or until the item expires out of the cache), which can retrieve it from the memory rather than redoing the work to re-create the result again. This is the essence of caching: trading memory for performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>To Node.js Or Not To Node.js</title>
      <link>https://www.davidhaney.io/to-node-js-or-not-to-node-js/</link>
      <pubDate>Mon, 24 Mar 2014 16:41:25 +0000</pubDate>
      <guid>https://www.davidhaney.io/to-node-js-or-not-to-node-js/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Node.js – it has rapidly become the “new hotness” in the tech start-up realm.&lt;/strong&gt; With each passing day, the fan base of Node lovers grows larger, spreading their rhetoric like a religion. How do you spot a Node.js user? Don’t worry, they’ll let you know.&lt;/p&gt;&#xA;&lt;p&gt;One day you’re at a regular user group meeting, sipping soda and talking with some colleagues, when the subject turns to Node. “Have you guys tried Node.js?” asks one of the people in your group. “It’s all the rage. All of the cool kids in Silicon Valley are using it!” “What does it do?” you ask, only to be bombarded with a sales pitch worthy of the best of used car lots. “Oh, it’s amazing!” they reply, sipping their diet coke and shuffling their hipster fedora and backpack with MacBook Pro in it (or something like that), “It’s server side JavaScript. It runs on a single thread and it can do 100,000 web requests a second!” They glance at the group for the oohs and ahhs, but most people just stare back with amazement in their eyes. Then, your hipster Node-loving friend drops the words that start wars: &lt;strong&gt;“It’s way better than .NET”&lt;/strong&gt; – and just like that, your group is hooked. They go home, download the Node.js tools, write “Hello World”, and suddenly they’re on their way to the next user group meeting to talk about how great Node is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C# Probably Getting New &#34;Safe Navigation&#34; Operator &#34;?.&#34;</title>
      <link>https://www.davidhaney.io/c-probably-getting-new-safe-navigation-operator/</link>
      <pubDate>Fri, 28 Feb 2014 11:47:08 +0000</pubDate>
      <guid>https://www.davidhaney.io/c-probably-getting-new-safe-navigation-operator/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3990187-add-operator-to-c-?tracking_code=594c10a522f8e9bc987ee4a5e2c0b38d&#34;&gt;It looks as if the Visual Studio dev team may be implementing a new operator in a future .NET release.&lt;/a&gt; This is due in large part to community demand, which is pretty cool because it shows that the VS team is listening to their customer base; a key part of a successful product.&lt;/p&gt;&#xA;&lt;p&gt;This new operator is likely going to take the syntax of &lt;code&gt;?.&lt;/code&gt; and is known as the &lt;strong&gt;Safe Navigation Operator&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trigger IValidatableObject.Validate When ModelState.IsValid is false</title>
      <link>https://www.davidhaney.io/trigger-ivalidatableobject-validate-when-modelstate-isvalid-is-false/</link>
      <pubDate>Wed, 05 Feb 2014 15:55:40 +0000</pubDate>
      <guid>https://www.davidhaney.io/trigger-ivalidatableobject-validate-when-modelstate-isvalid-is-false/</guid>
      <description>&lt;p&gt;I recently came across an ASP.NET MVC issue at work where the validation for my Model was not firing correctly. The Model implemented the &lt;code&gt;IValidatableObject&lt;/code&gt; interface and thus the &lt;code&gt;Validate&lt;/code&gt; method which did some specific logic to ensure the state of the Model (the &lt;code&gt;ModelState&lt;/code&gt;). This Model also had some &lt;code&gt;DataAnnotation&lt;/code&gt; attributes on it to validate basic input.&lt;/p&gt;&#xA;&lt;p&gt;Long story short, the issue I encountered was that when &lt;code&gt;ModelState.IsValid == false&lt;/code&gt; due to failure of the &lt;code&gt;DataAnnotation&lt;/code&gt; validation, the &lt;code&gt;IValidatableObject.Validate&lt;/code&gt; method is not fired, even though I needed it to be. This problem arose due to a rare situation in which &lt;code&gt;ModeState.IsValid&lt;/code&gt; was initially false but was later set to true in the Controller’s Action Method by some logic that removed errors from the &lt;code&gt;ModelState&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MVC4 Conditional HTML Attributes</title>
      <link>https://www.davidhaney.io/mvc4-conditional-html-attributes/</link>
      <pubDate>Wed, 27 Nov 2013 00:34:25 +0000</pubDate>
      <guid>https://www.davidhaney.io/mvc4-conditional-html-attributes/</guid>
      <description>&lt;p&gt;MVC4 made one simple and yet awesome improvement to View rendering that I don’t think many people are aware of.&lt;/p&gt;&#xA;&lt;p&gt;Have you ever had to conditionally add an attribute to an HTML element in your MVC View based on the presence of a variable? The typical use case is applying a CSS class to a div. Most of the time that code looks something like this:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;div @(myClass == null ? &amp;quot;&amp;quot; : &amp;quot;class=\&amp;quot;&amp;quot; + myClass + &amp;quot;\&amp;quot;&amp;quot;)&amp;gt;&amp;lt;/div&amp;gt;&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;What a pain – not only to write but to read… This destroys the View’s readability and clutters the HTML up big time!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatically Generate POCOs From DB With T4</title>
      <link>https://www.davidhaney.io/automatically-generate-pocos-from-db-with-t4/</link>
      <pubDate>Wed, 16 Oct 2013 21:35:51 +0000</pubDate>
      <guid>https://www.davidhaney.io/automatically-generate-pocos-from-db-with-t4/</guid>
      <description>&lt;p&gt;The T4 template engine is insanely powerful. I didn’t really realize just how powerful it was until I had a use case for it today. I stood up a database with about 40 tables in it, and planned to use an ORM to access the database. To use the ORM, I needed POCOs (Plain Old C# Objects) that represented my database. Some of these tables had 30-50 or so columns and I didn’t want to code all of this by hand – it would take literally days.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web API Mapping QueryString/Form Input</title>
      <link>https://www.davidhaney.io/web-api-mapping-querystringform-input/</link>
      <pubDate>Wed, 24 Jul 2013 17:55:12 +0000</pubDate>
      <guid>https://www.davidhaney.io/web-api-mapping-querystringform-input/</guid>
      <description>&lt;p&gt;If you’re using the Web API as part of the MVC4 framework, you may encounter a scenario in which you must map parameters of strange names to variables for which characters of the name would be illegal. That wasn’t very clear, so let’s do this by example. Consider part of the Facebook API:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Firstly, Facebook servers will make a single HTTP GET to your callback URL when you try to add or modify a subscription. A query string will be appended to your callback URL with the following parameters:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generic Comparer</title>
      <link>https://www.davidhaney.io/generic-comparer/</link>
      <pubDate>Mon, 22 Apr 2013 14:53:17 +0000</pubDate>
      <guid>https://www.davidhaney.io/generic-comparer/</guid>
      <description>&lt;p&gt;Have you ever had to write a comparer for a specific type, only to be frustrated when you needed to write a second and third comparer for other types? Fear not, a generic comparer can take care of this for you!&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xD;&#xA;/// Compares two objects of any type.&#xD;&#xA;/// &amp;lt;/summary&amp;gt;&#xD;&#xA;/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type to be compared.&amp;lt;/typeparam&amp;gt;&#xD;&#xA;public class GenericComparer&amp;lt;T&amp;gt; : IComparer&amp;lt;T&amp;gt;&#xD;&#xA;{&#xD;&#xA;    // The compare method&#xD;&#xA;    private readonly Func&amp;lt;T, T, int&amp;gt; _compareMethod = null;&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// The constructor.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;compareMethod&amp;quot;&amp;gt;The compare method.&amp;lt;/param&amp;gt;&#xD;&#xA;    public GenericComparer(Func&amp;lt;T, T, int&amp;gt; compareMethod)&#xD;&#xA;    {&#xD;&#xA;        // Sanitize&#xD;&#xA;        if (compareMethod == null)&#xD;&#xA;        {&#xD;&#xA;            throw new ArgumentNullException(&amp;quot;compareMethod&amp;quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        _compareMethod = compareMethod;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// Compares two objects.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;x&amp;quot;&amp;gt;The first object.&amp;lt;/param&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;y&amp;quot;&amp;gt;The second object.&amp;lt;/param&amp;gt;&#xD;&#xA;    /// &amp;lt;returns&amp;gt;Less than 0 if x is less than y, greater than &#xD;&#xA;    /// 0 if x is greater than y, 0 if they are equal.&amp;lt;/returns&amp;gt;&#xD;&#xA;    public int Compare(T x, T y)&#xD;&#xA;    {&#xD;&#xA;        return _compareMethod(x, y);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Just pass a method to the constructor that takes 2 objects of type T and returns an int, and you’re all set!&lt;/p&gt;</description>
    </item>
    <item>
      <title>One More Thing About List Binary Search</title>
      <link>https://www.davidhaney.io/one-more-thing-about-list-binary-search/</link>
      <pubDate>Sat, 30 Mar 2013 15:36:24 +0000</pubDate>
      <guid>https://www.davidhaney.io/one-more-thing-about-list-binary-search/</guid>
      <description>&lt;p&gt;I wanted to point people to this link at DotNetPearls:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.dotnetperls.com/binarysearch&#34;&gt;&lt;a href=&#34;http://www.dotnetperls.com/binarysearch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.dotnetperls.com/binarysearch&lt;/a&gt;&#xD;&#xA;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;They do an excellent, quick demonstration of &lt;code&gt;List&amp;lt;T&amp;gt;.BinarySearch&lt;/code&gt; and show a graph that really drives home how much faster it is for large lists than a regular traversal!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Make Mostly Read, Seldom-Written Lists Much More Efficient</title>
      <link>https://www.davidhaney.io/make-mostly-read-seldom-written-lists-much-more-efficient/</link>
      <pubDate>Fri, 15 Mar 2013 17:11:42 +0000</pubDate>
      <guid>https://www.davidhaney.io/make-mostly-read-seldom-written-lists-much-more-efficient/</guid>
      <description>&lt;p&gt;One of the many things that I do at work is run a full-blown Search Engine which I also developed from scratch. This Search Engine feeds all product related information to our websites. A search index consists of a pre-computed collection of products, their properties, a list of words that are correctly spelled, and some pre-computed faceted/guided navigation. A search index, until this week, took up approximately 10.7 gigs of memory. This was becoming too large as we added new products every single day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Better MIME Mapping Stealer!</title>
      <link>https://www.davidhaney.io/a-better-mime-mapping-stealer/</link>
      <pubDate>Tue, 12 Feb 2013 12:07:12 +0000</pubDate>
      <guid>https://www.davidhaney.io/a-better-mime-mapping-stealer/</guid>
      <description>&lt;p&gt;In the interest of self-improvement and sharing knowledge, I felt that I should share an update to my last post. I discovered a slightly better way to create the GetMimeMapping delegate/method via reflection that involves less casting and overhead, and is more Object Oriented in a sense. It allows the signature of the reflected method to be Func&amp;lt;string, string&amp;gt; instead of MethodInfo. Code below, note the use of &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/53cz7sc6.aspx&#34;&gt;Delegate.CreateDelegate(Type, MethodInfo)&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;&#xD;&#xA;/// Exposes the Mime Mapping method that Microsoft hid from us.&#xD;&#xA;/// &amp;lt;/summary&amp;gt;&#xD;&#xA;public static class MimeMappingStealer&#xD;&#xA;{&#xD;&#xA;    // The get mime mapping method&#xD;&#xA;    private static readonly Func&amp;lt;string, string&amp;gt; _getMimeMappingMethod = null;&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// Static constructor sets up reflection.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    static MimeMappingStealer()&#xD;&#xA;    {&#xD;&#xA;        // Load hidden mime mapping class and method from System.Web&#xD;&#xA;        var assembly = Assembly.GetAssembly(typeof(HttpApplication));&#xD;&#xA;        Type mimeMappingType = assembly.GetType(&amp;quot;System.Web.MimeMapping&amp;quot;);&#xD;&#xA;        _getMimeMappingMethod = &#xD;&#xA;&#x9;&#x9;    (Func&amp;lt;string, string&amp;gt;)Delegate.CreateDelegate(typeof(Func&amp;lt;string, string&amp;gt;), &#xD;&#xA;&#x9;&#x9;&#x9;    mimeMappingType.GetMethod(&amp;quot;GetMimeMapping&amp;quot;, &#xD;&#xA;                BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public |&#xD;&#xA;                BindingFlags.NonPublic | BindingFlags.FlattenHierarchy));&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    /// &amp;lt;summary&amp;gt;&#xD;&#xA;    /// Exposes the hidden Mime mapping method.&#xD;&#xA;    /// &amp;lt;/summary&amp;gt;&#xD;&#xA;    /// &amp;lt;param name=&amp;quot;fileName&amp;quot;&amp;gt;The file name.&amp;lt;/param&amp;gt;&#xD;&#xA;    /// &amp;lt;returns&amp;gt;The mime mapping.&amp;lt;/returns&amp;gt;&#xD;&#xA;    public static string GetMimeMapping(string fileName)&#xD;&#xA;    {&#xD;&#xA;        return _getMimeMappingMethod(fileName);&#xD;&#xA;    }&#xD;&#xA;}&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Determine MIME Type from File Name</title>
      <link>https://www.davidhaney.io/determine-mime-type-from-file-name/</link>
      <pubDate>Mon, 11 Feb 2013 15:15:46 +0000</pubDate>
      <guid>https://www.davidhaney.io/determine-mime-type-from-file-name/</guid>
      <description>&lt;p&gt;I recently had a need, in an ASP.NET MVC3 application, to read raw HTML, CSS, JS, and image files from disk and return them to the user… A sort of “pass-through” if you will. Normally I’d have simply routed to a custom HTTP handler per file type or just allowed MVC3 to map existing files to supply its own .NET HTTP handlers and do all of this work for me, but in this case I needed the mapped “directory” to switch behind the scenes based on Session settings… So I ultimately had to feed these files through a Controller and Action Method to gain access to the Session.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Published by Red Gate</title>
      <link>https://www.davidhaney.io/published-by-red-gate/</link>
      <pubDate>Fri, 18 Jan 2013 15:10:04 +0000</pubDate>
      <guid>https://www.davidhaney.io/published-by-red-gate/</guid>
      <description>&lt;p&gt;As of today I’ve been published in an e-Book offered for free by &lt;a href=&#34;http://www.red-gate.com&#34;&gt;Red Gate!&lt;/a&gt; It is called 50 Ways to Avoid, Find and Fix ASP.NET Performance Issues and contains many useful performance tips which have been contributed by various members of the .NET community. Many tips are ASP.NET MVC specific which is also a plus.&lt;/p&gt;&#xA;&lt;p&gt;My tip is #3 and has to do with debugging Microsoft symbols.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.red-gate.com/products/dotnet-development/ants-performance-profiler/entrypage/avoid-find-fix-asp-problems&#34;&gt;Get a free copy here – it has already taught me a few things I had never thought to consider!&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>But it Didn&#39;t Happen in DEV or QA!</title>
      <link>https://www.davidhaney.io/but-it-didnt-happen-in-dev-or-qa/</link>
      <pubDate>Sun, 02 Dec 2012 17:22:20 +0000</pubDate>
      <guid>https://www.davidhaney.io/but-it-didnt-happen-in-dev-or-qa/</guid>
      <description>&lt;p&gt;Most of us have been there: you’ve written a fantastic application that performs perfectly in your Development and/or QA environments, but in Production something goes wrong. Your application spins out of control, utilizing 100% of your CPU. Maybe it simply stops responding as if it were deadlocked. Or maybe it simply crashes randomly. What now?&lt;/p&gt;&#xA;&lt;p&gt;Logic tells you that you have a problem in the code somewhere that is only encountered in a Production-like environment… and if you could JUST get into the Production box, install Visual Studio (or at least the Remote Debugger), and debug the application, you’d be able to solve the problem. However, you can’t (because it’s Production!), and you can’t replicate the problem in any other environment. Maybe it’s because of stale Development or QA environment data compared to live Production data. Maybe it’s something else. You have no idea where to look to find and fix the problem in your application. For lack of eloquence: you’re screwed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static vs Instance string.Equals Benchmark</title>
      <link>https://www.davidhaney.io/static-vs-instance-string-equals-benchmark/</link>
      <pubDate>Wed, 24 Oct 2012 16:57:14 +0000</pubDate>
      <guid>https://www.davidhaney.io/static-vs-instance-string-equals-benchmark/</guid>
      <description>&lt;p&gt;A friend of mine commented on my last post asking about how much faster the static string.Equals method is than the instance string.Equals method. To satiate both of our curiosities, I have created this benchmarking application:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static void Main(string[] args)&#xD;&#xA;{&#xD;&#xA;    var stopwatch = new Stopwatch();&#xD;&#xA;&#xD;&#xA;    string a = &amp;quot;hello&amp;quot;;&#xD;&#xA;    string b = &amp;quot;hi&amp;quot;;&#xD;&#xA;&#xD;&#xA;    stopwatch.Start();&#xD;&#xA;    for (int i = 0; i &amp;lt; 10000000; i++)&#xD;&#xA;    {&#xD;&#xA;        a.Equals(b);&#xD;&#xA;    }&#xD;&#xA;    stopwatch.Stop();&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&amp;quot;Instance string.Equals over 10,000,000 iterations: &amp;quot; &#xD;&#xA;&#x9;    + stopwatch.ElapsedMilliseconds + &amp;quot; ms&amp;quot;);&#xD;&#xA;&#xD;&#xA;    stopwatch.Reset();&#xD;&#xA;&#xD;&#xA;    stopwatch.Start();&#xD;&#xA;    for (int i = 0; i &amp;lt; 10000000; i++)&#xD;&#xA;    {&#xD;&#xA;        string.Equals(a, b);&#xD;&#xA;    }&#xD;&#xA;    stopwatch.Stop();&#xD;&#xA;&#xD;&#xA;    Console.WriteLine(&amp;quot;Static string.Equals over 10,000,000 iterations: &amp;quot;&#xD;&#xA;&#x9;    + stopwatch.ElapsedMilliseconds + &amp;quot; ms&amp;quot;);&#xD;&#xA;&#xD;&#xA;    Console.ReadKey();&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The results of 5 runs, where “I” is the instance method and “S” is the static method, and the times are in milliseconds:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static vs Instance string.Equals</title>
      <link>https://www.davidhaney.io/stats-vs-reference-string-equals/</link>
      <pubDate>Mon, 22 Oct 2012 14:57:14 +0000</pubDate>
      <guid>https://www.davidhaney.io/stats-vs-reference-string-equals/</guid>
      <description>&lt;p&gt;As you may or may not know, &lt;a href=&#34;http://stackoverflow.com/a/2142088&#34;&gt;static methods are usually faster than instance methods&lt;/a&gt;. This alone should be a good enough reason to use the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/1hkt4325.aspx&#34;&gt;static string.Equals method&lt;/a&gt; in .NET, but if that doesn’t do it for you, allow me to present a simple example.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;string a = &amp;quot;hello&amp;quot;;&#xD;&#xA;string b = &amp;quot;hi&amp;quot;;&#xD;&#xA;bool result = a.Equals(b);&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;What is the expected result of these lines? A boolean value of false, of course. And it’d be true if the strings were identical. It’s also false if b is null. But what if a is null?&lt;/p&gt;</description>
    </item>
    <item>
      <title>TPL and Error Handling &amp; Continuation Tasks</title>
      <link>https://www.davidhaney.io/tpl-and-error-handling-continuations/</link>
      <pubDate>Sun, 12 Aug 2012 23:21:30 +0000</pubDate>
      <guid>https://www.davidhaney.io/tpl-and-error-handling-continuations/</guid>
      <description>&lt;p&gt;Two of my colleagues (one from work and one from a user group) kindly pointed out to me that in my last post I omitted &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ee372288.aspx&#34;&gt;Continuation Tasks&lt;/a&gt; as a means of Error Handling for the TPL. As such, I will expand upon my last post with an example of handling errors via a Continuation Task.&lt;/p&gt;&#xA;&lt;p&gt;Continuing where we left off last, the following code will utilize a Task Continuation to handle errors within Tasks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TPL and Error Handling</title>
      <link>https://www.davidhaney.io/tpl-and-error-handling/</link>
      <pubDate>Sun, 05 Aug 2012 13:39:38 +0000</pubDate>
      <guid>https://www.davidhaney.io/tpl-and-error-handling/</guid>
      <description>&lt;p&gt;As of .NET 4.0, the TPL or Task Parallel Library is king when it comes to parallelization. It allows for smooth, easy multi-threading for any application. There is a slight learning curve, however, and a major part of this is understanding how Exceptions bubble-up while using the TPL.&lt;/p&gt;&#xA;&lt;p&gt;Let’s partake in a simple example. This code will create and run a task that throws an Exception, and then attempt to catch it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compiler Tricks - Inferred Types</title>
      <link>https://www.davidhaney.io/compiler-tricks-inferred-types/</link>
      <pubDate>Mon, 16 Jul 2012 00:33:54 +0000</pubDate>
      <guid>https://www.davidhaney.io/compiler-tricks-inferred-types/</guid>
      <description>&lt;p&gt;The .NET compiler is a terrific thing… After all, it turns your C# into an executable program!&lt;/p&gt;&#xA;&lt;p&gt;One nice feature of the .NET compiler, which is becoming better each release, is inferred typing. I’d like to lay out a few short examples that might help you develop your programming standards and practices.&lt;/p&gt;&#xA;&lt;p&gt;Inferring a type when creating an array.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// Create and initialize an array&#xD;&#xA;var myArray = new int[] { 1, 2, 3 };&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Becomes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Custom Output Caching with MVC3 and .NET 4.0 - Done Properly!</title>
      <link>https://www.davidhaney.io/custom-output-caching-with-mvc3-and-net-4-0-done-right/</link>
      <pubDate>Wed, 20 Jun 2012 00:47:52 +0000</pubDate>
      <guid>https://www.davidhaney.io/custom-output-caching-with-mvc3-and-net-4-0-done-right/</guid>
      <description>&lt;p&gt;I came across a need at work today to re-implement some of the Output Caching for our MVC3 application which runs under .NET 4.0. I wanted to use standard Output Caching (via the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.mvc.outputcacheattribute(v=vs.98).aspx&#34;&gt;OutputCacheAttribute&lt;/a&gt; class, why re-invent the well-working wheel?) but due to some of our requirements I needed more control over how my objects were cached. More specifically, I needed to cache them with a custom Cache Dependency. With a little bit of Google-Fu, &lt;a href=&#34;http://weblogs.asp.net/scottgu/archive/2010/01/27/extensible-output-caching-with-asp-net-4-vs-2010-and-net-4-0-series.aspx&#34;&gt;I was delighted to learn of the Output Cache Provider functionality introduced in ASP.NET 4.&lt;/a&gt; I implemented a custom &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.web.caching.outputcacheprovider.aspx&#34;&gt;OutputCacheProvider&lt;/a&gt;, registered it in my Web.config file as the Default Cache Provider, and I was well on my way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LINQ and Deferred Execution</title>
      <link>https://www.davidhaney.io/linq-and-deferred-execution/</link>
      <pubDate>Mon, 11 Jun 2012 00:57:15 +0000</pubDate>
      <guid>https://www.davidhaney.io/linq-and-deferred-execution/</guid>
      <description>&lt;p&gt;As of .NET 3.0, LINQ (and the often related Lambda Expressions) have been available for our use and abuse. LINQ stands for Language INtegrated Query, and is a method of modelling OO data in a more or less relational sense that is not unlike databases. And just like databases, it comes with a cost.&lt;/p&gt;&#xA;&lt;p&gt;To offset this cost, LINQ uses Deferred Execution. Deferred Execution means that the code is not executed until it is needed. This means that the LINQ code that you write is not actually executed until you NEED to execute it – typically during an enumeration of the results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Make Your Debugging Life Easier</title>
      <link>https://www.davidhaney.io/make-your-debugging-life-easier/</link>
      <pubDate>Fri, 25 May 2012 20:25:36 +0000</pubDate>
      <guid>https://www.davidhaney.io/make-your-debugging-life-easier/</guid>
      <description>&lt;p&gt;Sorry for the delay in posts, May has been a very busy month.&lt;/p&gt;&#xA;&lt;p&gt;In order to accurately debug or profile an external assembly or library (AKA one you’re not directly compiling), you need the associated &lt;b&gt;PDB files&lt;/b&gt; to accompany each of the DLLs. These files give the debugger some information about the compiled assembly so that your debugger or profiler can become aware of function names, line numbers, and other related meta data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Who Loves Interns?</title>
      <link>https://www.davidhaney.io/who-loves-interns/</link>
      <pubDate>Wed, 02 May 2012 23:50:20 +0000</pubDate>
      <guid>https://www.davidhaney.io/who-loves-interns/</guid>
      <description>&lt;p&gt;The topic at hand is interning. More specifically, string interning.&lt;/p&gt;&#xA;&lt;p&gt;“What is string interning?” you ask? Good question. As you may or may not know, strings are immutable reference types. This means that they are read-only and a pointer will refer to the string’s location on the heap. Typically, a new string is created and stored within your application’s memory each time that you assign a string – &lt;em&gt;even if the same string is defined repeatedly.&lt;/em&gt; What this means is that you can define the same string N times and have it take up the string’s memory N times. This sucks when dealing with repeating string data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is a Virtual Method, Anyway?</title>
      <link>https://www.davidhaney.io/what-is-a-virtual-method-anyway/</link>
      <pubDate>Sun, 29 Apr 2012 23:26:41 +0000</pubDate>
      <guid>https://www.davidhaney.io/what-is-a-virtual-method-anyway/</guid>
      <description>&lt;p&gt;Something which I feel carries a lot of confusion in the .NET realm is virtual methods. During interviews, I tend to ask candidates about virtual methods: why and when they’d use one, what the purposes is, how a virtual method “works” under the hood, and how it differs from “shadowing”. Surprisingly, in what has probably been over one hundred interviews with senior-ish candidates, I don’t believe that more than one or two of them have answered anything about virtual methods correctly. From this I conclude that the understanding of virtual methods is not strong among the typical developer… And so, let us dive in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Use Interfaces?</title>
      <link>https://www.davidhaney.io/why-use-interfaces/</link>
      <pubDate>Thu, 26 Apr 2012 23:51:18 +0000</pubDate>
      <guid>https://www.davidhaney.io/why-use-interfaces/</guid>
      <description>&lt;p&gt;I’m a bit tipsy at the moment, so hopefully this post goes well.&lt;/p&gt;&#xA;&lt;p&gt;A question that I like to ask while interviewing individuals is: “why would you want to use an interface?” I get a ton of answers that span the supposed gamut of programming; some are good and some are of course terrible, however I’d like to share some input on what I feel is the importance of interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>An Overview of Generic Constraints</title>
      <link>https://www.davidhaney.io/an-overview-of-generic-constraints/</link>
      <pubDate>Tue, 24 Apr 2012 21:46:41 +0000</pubDate>
      <guid>https://www.davidhaney.io/an-overview-of-generic-constraints/</guid>
      <description>&lt;p&gt;This is my first post. I hope that it doesn’t suck.&lt;/p&gt;&#xA;&lt;p&gt;As of .NET 2.0, Microsoft introduced the concept of generics. Generics is a concept that allow you to “template” methods and types such as classes and interfaces in a (generally) type-safe way. Upon compilation, generic type metadata is stored in IL, and JIT’d as you reference the generic method or class with an actual type at runtime. Value types each get their own “copy” of the JIT’d generic code, whereas reference types share a single instance of the code. This is because the generic implementation is identical for reference types – they’re all just pointers.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
